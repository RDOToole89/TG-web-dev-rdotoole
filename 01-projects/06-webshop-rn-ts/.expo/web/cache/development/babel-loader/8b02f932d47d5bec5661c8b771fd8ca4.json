{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useEffect, useState } from 'react';\nimport * as Font from 'expo-font';\nexport default function useCachedResources() {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoadingComplete = _useState2[0],\n      setIsLoadingComplete = _useState2[1];\n\n  useEffect(function () {\n    var loadResourcesAndDataAsync = function loadResourcesAndDataAsync() {\n      return _regeneratorRuntime.async(function loadResourcesAndDataAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Font.loadAsync({\n                ubuntu: require(\"../../assets/fonts/Ubuntu-Regular.ttf\"),\n                'ubuntu-bold': require(\"../../assets/fonts/Ubuntu-Bold.ttf\")\n              }));\n\n            case 3:\n              _context.next = 8;\n              break;\n\n            case 5:\n              _context.prev = 5;\n              _context.t0 = _context[\"catch\"](0);\n              console.warn(_context.t0);\n\n            case 8:\n              _context.prev = 8;\n              setIsLoadingComplete(true);\n              return _context.finish(8);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 5, 8, 11]], Promise);\n    };\n\n    loadResourcesAndDataAsync();\n  }, []);\n  return isLoadingComplete;\n}","map":{"version":3,"sources":["/home/roibin/Desktop/TechGrounds/01-projects/06-webshop-rn-ts/src/hooks/useCachedResources.ts"],"names":["useEffect","useState","Font","useCachedResources","isLoadingComplete","setIsLoadingComplete","loadResourcesAndDataAsync","loadAsync","ubuntu","require","console","warn"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AAEA,eAAe,SAASC,kBAAT,GAA8B;AAC3C,kBAAkDF,QAAQ,CAAC,KAAD,CAA1D;AAAA;AAAA,MAAOG,iBAAP;AAAA,MAA0BC,oBAA1B;;AAEAL,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMM,yBAAyB,GAAG,SAA5BA,yBAA4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAExBJ,IAAI,CAACK,SAAL,CAAe;AACnBC,gBAAAA,MAAM,EAAEC,OAAO,yCADI;AAEnB,+BAAeA,OAAO;AAFH,eAAf,CAFwB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAO9BC,cAAAA,OAAO,CAACC,IAAR;;AAP8B;AAAA;AAS9BN,cAAAA,oBAAoB,CAAC,IAAD,CAApB;AAT8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlC;;AAaAC,IAAAA,yBAAyB;AAC1B,GAfQ,EAeN,EAfM,CAAT;AAiBA,SAAOF,iBAAP;AACD","sourcesContent":["import { useEffect, useState } from 'react';\nimport * as Font from 'expo-font';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setIsLoadingComplete] = useState(false);\n\n  useEffect(() => {\n    const loadResourcesAndDataAsync = async () => {\n      try {\n        await Font.loadAsync({\n          ubuntu: require('../../assets/fonts/Ubuntu-Regular.ttf'),\n          'ubuntu-bold': require('../../assets/fonts/Ubuntu-Bold.ttf'),\n        });\n      } catch (error) {\n        console.warn(error);\n      } finally {\n        setIsLoadingComplete(true);\n      }\n    };\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n"]},"metadata":{},"sourceType":"module"}