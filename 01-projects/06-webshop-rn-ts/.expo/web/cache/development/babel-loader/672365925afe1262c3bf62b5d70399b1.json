{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from 'axios';\nimport { ActionType } from \"../action-types\";\nexport var searchRepositories = function searchRepositories(term) {\n  return function _callee(dispatch) {\n    var _await$axios$get, data, names;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            dispatch({\n              type: ActionType.SEARCH_REPOSITORIES\n            });\n            _context.prev = 1;\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(axios.get('https://api.npms.io/v2/search', {\n              params: {\n                q: term\n              }\n            }));\n\n          case 4:\n            _await$axios$get = _context.sent;\n            data = _await$axios$get.data;\n            console.log('DATA', data);\n            names = data.results.map(function (result) {\n              return result.package.name;\n            });\n            console.log('NAMES', names);\n            dispatch({\n              type: ActionType.SEARCH_REPOSITORIES_SUCCESS,\n              payload: names\n            });\n            _context.next = 15;\n            break;\n\n          case 12:\n            _context.prev = 12;\n            _context.t0 = _context[\"catch\"](1);\n            dispatch({\n              type: ActionType.SEARCH_REPOSITORIES_ERROR,\n              payload: _context.t0.message\n            });\n\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[1, 12]], Promise);\n  };\n};","map":{"version":3,"sources":["/home/roibin/Desktop/TechGrounds/01-projects/06-webshop-rn-ts/src/state/action-creators/index.ts"],"names":["axios","ActionType","searchRepositories","term","dispatch","type","SEARCH_REPOSITORIES","get","params","q","data","console","log","names","results","map","result","package","name","SEARCH_REPOSITORIES_SUCCESS","payload","SEARCH_REPOSITORIES_ERROR","message"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,UAAT;AAEA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,IAAD,EAAkB;AAElD,SAAO,iBAAOC,QAAP;AAAA;;AAAA;AAAA;AAAA;AAAA;AACLA,YAAAA,QAAQ,CAAC;AACPC,cAAAA,IAAI,EAAEJ,UAAU,CAACK;AADV,aAAD,CAAR;AADK;AAAA;AAAA,6CAMoBN,KAAK,CAACO,GAAN,CAAU,+BAAV,EAA2C;AAChEC,cAAAA,MAAM,EAAE;AACNC,gBAAAA,CAAC,EAAEN;AADG;AADwD,aAA3C,CANpB;;AAAA;AAAA;AAMKO,YAAAA,IANL,oBAMKA,IANL;AAWHC,YAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBF,IAApB;AACMG,YAAAA,KAZH,GAYWH,IAAI,CAACI,OAAL,CAAaC,GAAb,CAAiB,UAACC,MAAD;AAAA,qBAAiBA,MAAM,CAACC,OAAP,CAAeC,IAAhC;AAAA,aAAjB,CAZX;AAaHP,YAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBC,KAArB;AAEAT,YAAAA,QAAQ,CAAC;AACPC,cAAAA,IAAI,EAAEJ,UAAU,CAACkB,2BADV;AAEPC,cAAAA,OAAO,EAAEP;AAFF,aAAD,CAAR;AAfG;AAAA;;AAAA;AAAA;AAAA;AAoBHT,YAAAA,QAAQ,CAAC;AACPC,cAAAA,IAAI,EAAEJ,UAAU,CAACoB,yBADV;AAEPD,cAAAA,OAAO,EAAE,YAAME;AAFR,aAAD,CAAR;;AApBG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AA0BD,CA5BM","sourcesContent":["import { Action } from '../actions/actionInterfaces';\nimport axios from 'axios';\nimport { Dispatch } from 'redux';\nimport { ActionType } from '../action-types';\n\nexport const searchRepositories = (term: string) => {\n  // * NOTE AT BOTTOM\n  return async (dispatch: Dispatch<Action>) => {\n    dispatch({\n      type: ActionType.SEARCH_REPOSITORIES,\n    });\n\n    try {\n      const { data } = await axios.get('https://api.npms.io/v2/search', {\n        params: {\n          q: term,\n        },\n      });\n      console.log('DATA', data);\n      const names = data.results.map((result: any) => result.package.name);\n      console.log('NAMES', names);\n\n      dispatch({\n        type: ActionType.SEARCH_REPOSITORIES_SUCCESS,\n        payload: names,\n      });\n    } catch (error: any) {\n      dispatch({\n        type: ActionType.SEARCH_REPOSITORIES_ERROR,\n        payload: error.message,\n      });\n    }\n  };\n};\n\n// NOTE 1:\n// Take the dispatch Type and feed it our action type Alias\n//  return async (dispatch: Dispatch<ActionAlias>)\n// export type Action =\n//   | SearchRepositoriesAction\n//   | SearchRepositoriesSuccessAction\n//   | SearchRepositoriesErrorAction;\n"]},"metadata":{},"sourceType":"module"}